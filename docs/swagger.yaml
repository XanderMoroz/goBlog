definitions:
  models.ArticleResponse:
    description: Тело ответа после cоздания статьи
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
    - content
    - createdAt
    - title
    - updatedAt
    type: object
  models.CategoryResponse:
    description: Тело ответа после извлечения статьи
    properties:
      createdAt:
        type: string
      id:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
    - createdAt
    - title
    - updatedAt
    type: object
  models.CreateArticleRequest:
    description: Тело запроса для создания статьи
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  models.CreateCategoryBody:
    description: Тело запроса для создания статьи
    properties:
      title:
        type: string
    required:
    - title
    type: object
  models.LoginRequest:
    description: Тело запроса для аутентификации пользователя
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpUserRequest:
    description: Тело запроса для регистрации пользователя
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UpdateArticleBody:
    description: Тело запроса для обновления статьи
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  models.UserResponse:
    description: Тело ответа после cоздания пользователя
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    required:
    - createdAt
    - email
    - name
    - updatedAt
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Сервис с новостными статьями и блогами.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Good News on Go
  version: "1.0"
paths:
  /api/v1/current_user:
    get:
      description: Get token from users cookee
      operationId: get-current-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
      summary: get current user
      tags:
      - Authentication
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate User in app with given request body
      parameters:
      - description: Введите данные для авторизации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: user authentication
      tags:
      - Authentication
  /api/v1/logout:
    get:
      description: Clear JWT token by setting an empty value and expired time in the
        cookie
      operationId: logout-current-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: logout current user
      tags:
      - Authentication
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register User in app with given request body
      parameters:
      - description: Введите данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: user registration
      tags:
      - Authentication
  /articles:
    get:
      description: Get all articles from db
      operationId: get-all-articles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ArticleResponse'
            type: array
      summary: get all articles
      tags:
      - Articles
    post:
      consumes:
      - application/json
      description: Creating Article in DB with given request body
      parameters:
      - description: Введите данные статьи
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: create new article
      tags:
      - Articles
  /articles/{id}:
    delete:
      description: Delete a article by ID
      operationId: delete-article-by-id
      parameters:
      - description: articleID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: delete a article by ID
      tags:
      - Articles
    get:
      description: Get an article by ID
      operationId: get-article-by-id
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ArticleResponse'
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: get an article by ID
      tags:
      - Articles
    put:
      description: Update article by ID
      operationId: delete-article-by-id
      parameters:
      - description: articleID
        in: path
        name: id
        required: true
        type: integer
      - description: Введите новые данные статьи
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateArticleBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: update article by ID
      tags:
      - Articles
  /categories:
    get:
      description: Get all categories from db
      operationId: get-all-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CategoryResponse'
            type: array
      summary: get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Creating Category in DB with given request body
      parameters:
      - description: Введите название категории статьи
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: create new category
      tags:
      - Categories
swagger: "2.0"
