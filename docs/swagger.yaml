definitions:
  main.article:
    properties:
      id:
        type: string
      task:
        type: string
    type: object
  main.message:
    properties:
      message:
        type: string
    type: object
  models.CreateUserRequest:
    description: Тело запроса для создания пользователя
    properties:
      LastName:
        type: string
      age:
        type: integer
      country:
        type: string
      email:
        type: string
      firstName:
        type: string
      role:
        type: string
    required:
    - LastName
    - age
    - country
    - email
    - firstName
    - role
    type: object
  models.UpdateUserBody:
    description: Тело запроса для обновления пользователя
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    type: object
  models.UserResponse:
    description: Тело запроса для создания пользователя
    properties:
      age:
        type: integer
      country:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      role:
        type: string
      updatedAt:
        type: string
    required:
    - age
    - country
    - createdAt
    - email
    - firstName
    - lastName
    - role
    - updatedAt
    type: object
host: 127.0.0.1:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Сервис с новостными статьями и блогами.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Good News on Go
  version: "1.0"
paths:
  /article:
    get:
      description: Get all items in the article list
      operationId: get-all-articles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.article'
      summary: get all items
      tags:
      - Articles
    post:
      description: Add a new item to the article list
      operationId: create-article
      parameters:
      - description: article data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/main.article'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.message'
      summary: add a new item
      tags:
      - Articles
  /article/{id}:
    delete:
      description: Delete a article item by ID
      operationId: delete-article-by-id
      parameters:
      - description: article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.article'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.message'
      summary: delete a article item by ID
      tags:
      - Articles
    get:
      description: Get a article item by ID
      operationId: get-article-by-id
      parameters:
      - description: article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.article'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.message'
      summary: get a article item by ID
      tags:
      - Articles
  /nice:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - root
  /users:
    get:
      description: Get all users from db
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
      summary: get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creating User in DB with given request body
      parameters:
      - description: Введите данные пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: create new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Delete a user item by ID
      operationId: delete-user-by-id
      parameters:
      - description: userUUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: delete a user item by ID
      tags:
      - Users
    get:
      description: Get a user by ID
      operationId: get-user-by-id
      parameters:
      - description: userUUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: get a user by ID
      tags:
      - Users
    put:
      description: Update user by ID
      operationId: delete-user-by-id
      parameters:
      - description: userUUID
        in: path
        name: id
        required: true
        type: string
      - description: Введите данные пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: update user by ID
      tags:
      - Users
swagger: "2.0"
